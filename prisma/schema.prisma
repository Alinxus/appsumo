// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  VENDOR
  ADMIN
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum ToolStatus {
  DRAFT
  PENDING_REVIEW
  ACTIVE
  INACTIVE
  REJECTED
}

enum FulfillmentMethod {
  BULK_KEYS
  COUPON_CODE
  API_PROVISION
  MANUAL_FULFILLMENT
}

model Profile {
  id          String   @id @default(cuid())
  email       String   @unique
  fullName    String?
  avatarUrl   String?
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  aiTools     AiTool[]
  reviews     Review[]
  purchases   Purchase[]
  wishlists   Wishlist[]

  @@map("profiles")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  iconUrl     String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  aiTools AiTool[]

  @@map("categories")
}

model AiTool {
  id                  String     @id @default(cuid())
  name                String
  slug                String     @unique
  description         String?
  shortDescription    String?
  categoryId          String
  vendorId            String
  regularPrice        Decimal    @db.Decimal(10, 2)
  dealPrice           Decimal?   @db.Decimal(10, 2)
  discountPercentage  Int?
  dealStartsAt        DateTime?
  dealEndsAt          DateTime?
  status              ToolStatus @default(DRAFT)
  isFeatured          Boolean    @default(false)
  stockQuantity       Int?
  images              String[]
  features            String[]
  specifications      Json?
  requirements        String?
  demoUrl             String?
  websiteUrl          String?
  accessInstructions  String?
  licenseType         String?
  refundPolicy        String?
  
  // AppSumo-style fulfillment
  fulfillmentMethod   FulfillmentMethod @default(MANUAL_FULFILLMENT)
  couponCode          String?
  apiWebhookUrl       String?
  redemptionUrl       String?
  fulfillmentInstructions String?
  
  // Commission & Revenue
  platformCommission Decimal    @db.Decimal(5, 2) @default(70.00) // AppSumo's cut (70%)
  vendorRevenue      Decimal    @db.Decimal(5, 2) @default(30.00) // Vendor's cut (30%)
  
  // License Management
  totalLicenses      Int?       // Total licenses available
  usedLicenses       Int        @default(0)
  
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  category  Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  vendor    Profile    @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  reviews   Review[]
  purchases Purchase[]
  wishlists Wishlist[]
  licenseKeys LicenseKey[]

  @@map("ai_tools")
}

model Review {
  id         String   @id @default(cuid())
  toolId     String
  userId     String
  rating     Int      @db.SmallInt
  title      String?
  content    String?
  isVerified Boolean  @default(false)
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tool AiTool @relation(fields: [toolId], references: [id], onDelete: Cascade)
  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([toolId, userId])
  @@map("reviews")
}

model Purchase {
  id                  String         @id @default(cuid())
  userId              String
  toolId              String
  quantity            Int            @default(1)
  pricePaid           Decimal        @db.Decimal(10, 2)
  status              PurchaseStatus @default(PENDING)
  licenseKey          String?
  accessInstructions  String?
  orderNumber         String         @unique
  paymentMethod       String?
  refundReason        String?
  refundedAt          DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool AiTool  @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  toolId    String
  createdAt DateTime @default(now())

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool AiTool  @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@unique([userId, toolId])
  @@map("wishlists")
}

model NewsletterSubscription {
  id          String   @id @default(cuid())
  email       String   @unique
  isActive    Boolean  @default(true)
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("newsletter_subscriptions")
}

model AdminSettings {
  id                    String   @id @default(cuid())
  siteName              String   @default("AIsumo")
  siteDescription       String?
  siteUrl               String?
  logoUrl               String?
  faviconUrl            String?
  primaryColor          String   @default("#00bf63")
  accentColor           String   @default("#ff6b35")
  heroTitle             String?
  heroSubtitle          String?
  featuredDealId        String?
  enableNewsletter      Boolean  @default(true)
  enableUserRegistration Boolean  @default(true)
  maintenanceMode       Boolean  @default(false)
  maintenanceMessage    String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("admin_settings")
}

model VendorApplication {
  id              String   @id @default(cuid())
  email           String
  companyName     String
  contactName     String
  website         String?
  description     String
  toolsToSubmit   String
  status          String   @default("PENDING")
  notes           String?
  reviewedBy      String?
  reviewedAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("vendor_applications")
}

model DealPromotion {
  id          String    @id @default(cuid())
  name        String
  description String?
  discountType String
  discountValue Decimal @db.Decimal(10, 2)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(true)
  maxUses     Int?
  currentUses Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("deal_promotions")
}

model Analytics {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  pageViews   Int      @default(0)
  uniqueUsers Int      @default(0)
  newSignups  Int      @default(0)
  purchases   Int      @default(0)
  revenue     Decimal  @db.Decimal(12, 2) @default(0)
  createdAt   DateTime @default(now())

  @@unique([date])
  @@map("analytics")
}

model LicenseKey {
  id          String   @id @default(cuid())
  toolId      String
  keyValue    String   @unique
  isUsed      Boolean  @default(false)
  usedBy      String?  // User ID who redeemed it
  usedAt      DateTime?
  createdAt   DateTime @default(now())

  tool        AiTool   @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@map("license_keys")
}
